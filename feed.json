{
    "version": "https://jsonfeed.org/version/1",
    "title": "Daniel&#x27;s Blog",
    "description": "",
    "home_page_url": "https://danielbatesj.github.io/Publii-Blogs",
    "feed_url": "https://danielbatesj.github.io/Publii-Blogs/feed.json",
    "user_comment": "",
    "author": {
        "name": "Daniel Bates"
    },
    "items": [
        {
            "id": "https://danielbatesj.github.io/Publii-Blogs/actix_web-resources-and-routing.html",
            "url": "https://danielbatesj.github.io/Publii-Blogs/actix_web-resources-and-routing.html",
            "title": "How to route and return in actix_web",
            "summary": "When trying to learn actix_web, you might be intemidated by the number of different ways to setup a given route. The documentation uses them seemingly interchangably, and you might wonder if you're doing things the \"correct\" way while writing your backend code. The goal of&hellip;",
            "content_html": "<p>When trying to learn actix_web, you might be intemidated by the number of different ways to setup a given route. The documentation uses them seemingly interchangably, and you might wonder if you're doing things the \"correct\" way while writing your backend code. The goal of this blog post is to try and explain the differences between these diffferent methods, and allow you to make a more educated decision. </p>\n<h2>Types of Routing</h2>\n<p>There are two main ways to route incoming requests with actix_web.</p>\n<ol>\n<li>Register a Route</li>\n<li>Register a Service</li>\n</ol>\n<p>On the surface level, <a href=\"https://docs.rs/actix-web/4.0.1/actix_web/struct.App.html#method.route\" target=\"_blank\" rel=\"noopener noreferrer\">route</a> is the much easier option. You specify a path, the type of request, and the function to route to. With <a href=\"https://docs.rs/actix-web/4.0.1/actix_web/struct.App.html#method.service\">service</a>, you are registering a type that implements <a href=\"https://docs.rs/actix-web/4.0.1/actix_web/dev/trait.HttpServiceFactory.html\">HttpServiceFactory</a>.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-21-at-11.58.09-AM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.58.09-AM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.58.09-AM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.58.09-AM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.58.09-AM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.58.09-AM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.58.09-AM-2xl.png 1600w\"  alt=\"\" width=\"1300\" height=\"110\"></figure>\n<p>Looking at the code snippit above, it's easy to see which of these is more desirable to route a basic request to a basic function. But service registration was a trick up it's sleeve. </p>\n<h3>Actix attributes</h3>\n<p>Let's take a look at an example. We're going to have two identical functions that both return \"Hello World\", with the only difference being one will be tagged with actix_web's GET <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">attribute</code>.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-20-at-3.58.45-PM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.58.45-PM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.58.45-PM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.58.45-PM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.58.45-PM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.58.45-PM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.58.45-PM-2xl.png 1600w\"  alt=\"\" width=\"482\" height=\"228\"></figure><figure class=\"post__image\"><img loading=\"lazy\"  style=\"color: var(--text-editor-body-color); font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);\" src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-20-at-3.59.26-PM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.59.26-PM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.59.26-PM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.59.26-PM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.59.26-PM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.59.26-PM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-3.59.26-PM-2xl.png 1600w\"  alt=\"\" width=\"684\" height=\"78\"></figure>\n<p>Now when we look at the difference between the two, the service is much more concise, and it is very clear from looking at the function definition, what endpoint is being handled. Let's use a tool called <a href=\"https://github.com/dtolnay/cargo-expand\">cargo-expand</a> to see what is generated by the compiler when I add the attribute tag above <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">hello_service</code>.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-20-at-4.02.17-PM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.02.17-PM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.02.17-PM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.02.17-PM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.02.17-PM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.02.17-PM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.02.17-PM-2xl.png 1600w\"  alt=\"\" width=\"811\" height=\"367\"></figure>\n<p>We can see that the attribute generated a unit struct named after our function, then implemented <a href=\"https://docs.rs/actix-web/4.0.1/actix_web/dev/trait.HttpServiceFactory.html\">HttpServiceFactory</a> on that struct for us. Now, when we pass <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">hello_service</code> into the service method, we have a type that implements <a href=\"https://docs.rs/actix-web/4.0.1/actix_web/dev/trait.HttpServiceFactory.html\">HttpServiceFactory</a>, and still contains the function block we defined.</p>\n<h3>Drawbacks to Attributes</h3>\n<p>One drawback with using this method is that our original function is now practically inaccessable. Another drawback is the lack of flexibility in the implementing of our resource. For most simple routes, this should probably be your main go-to. But as the complexity rises, you might find that you need to manually register resources.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-20-at-4.20.17-PM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.20.17-PM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.20.17-PM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.20.17-PM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.20.17-PM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.20.17-PM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-20-at-4.20.17-PM-2xl.png 1600w\"  alt=\"\" width=\"806\" height=\"110\"></figure>\n<p><span style=\"text-decoration: underline;\"><strong>tl;dr</strong></span> - For basic routes, use a combination of the <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">attributes</code> actix provides for HTTP methods in combination with <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">.service()</code> unless you need to call the function you're routing to from anywhere else. Once things become more complicated, you can use manual service creation to get more granular controll over your routing. </p>\n<h2>Return Types</h2>\n<p>There are many different ways to return from routes in actix_web. These were a big source of confusion for me at the start so I want to demystify them to the best of my abilities. The <a href=\"https://actix.rs/actix-web/actix_web/trait.Responder.html#implementations-1\">Responder</a> trait in actix_web is used to turn a return value into an <a href=\"https://actix.rs/actix-web/actix_web/struct.HttpResponse.html\">HttpReponse</a>. Responder is implemented for a bunch of types by default. Above we had an example of a function that returned a <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">'static str</code>, actix_web can turn this type into an <a href=\"https://actix.rs/actix-web/actix_web/struct.HttpResponse.html\">HttpReponse</a> for us, saving us a bit of time and allowing our code to be reused elsewhere.</p>\n<p>Here is a quick cheat sheet to reference:</p>\n<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">\n<tbody>\n<tr>\n<td style=\"width: 33.3333%;\"><code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">impl Responder</code></td>\n<td style=\"width: 33.3333%;\">Use to avoid manually constructing <a href=\"https://docs.rs/actix-web/4.0.1/actix_web/struct.HttpResponse.html\">HttpResponses</a></td>\n<td style=\"width: 33.3333%;\">Most General Purpose.</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\"><code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">actix_web::Result</code></td>\n<td style=\"width: 33.3333%;\">Use when your error types are friendly, or if you're using your own custom errors.</td>\n<td style=\"width: 33.3333%;\">Use in combination with impl Responder</td>\n</tr>\n<tr>\n<td style=\"width: 33.3333%;\">The raw type</td>\n<td style=\"width: 33.3333%;\">Use to serve static information, and when you want to reuse your function outside of a purly actix context.</td>\n<td style=\"width: 33.3333%;\">Use with string types that have built-in <a href=\"https://actix.rs/actix-web/actix_web/trait.Responder.html#implementations-1\">Responder</a> implementations. Or custom types that you implement <a href=\"https://actix.rs/actix-web/actix_web/trait.Responder.html#implementations-1\">Responder</a> for.</td>\n</tr>\n</tbody>\n</table>\n<p>Where this becomes more challenging is with our own custom types. Thankfully actix_web provides some very useful tools to make this process simple for most of what you might want to respond with.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-21-at-9.38.45-AM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-9.38.45-AM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-9.38.45-AM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-9.38.45-AM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-9.38.45-AM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-9.38.45-AM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-9.38.45-AM-2xl.png 1600w\"  alt=\"\" width=\"560\" height=\"448\"></figure>\n<p>Here, we have a type <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">A</code> that implements <a href=\"https://docs.serde.rs/serde/trait.Serialize.html\">Serde::Serialize</a>. We can use <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">impl Responder</code> as our opaque return type, as our struct can be serialized, and <a href=\"https://actix.rs/actix-web/actix_web/trait.Responder.html#implementations-1\">Responder</a> is implemented for us for <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">Json&lt;T&gt;</code> where <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">T</code> implements <code class=\"c-mrkdwn__code\" data-stringify-type=\"code\">Serialize</code>.</p>\n<p>We can also take advantage of actix's <a href=\"https://docs.rs/actix-web/4.0.1/actix_web/type.Result.html\">Result</a> to allow us to return errors more easily. I personally wouldn't use this method if you're not going to create your own errors for your project.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-21-at-10.54.24-AM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.54.24-AM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.54.24-AM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.54.24-AM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.54.24-AM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.54.24-AM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.54.24-AM-2xl.png 1600w\"  alt=\"\" width=\"848\" height=\"272\"></figure>\n<p>Here is an example of a custom error being used with actix_web's Result. The implementation example is down below. </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-21-at-11.18.17-AM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.18.17-AM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.18.17-AM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.18.17-AM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.18.17-AM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.18.17-AM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.18.17-AM-2xl.png 1600w\"  alt=\"\" width=\"854\" height=\"384\"></figure>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-21-at-11.23.41-AM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.23.41-AM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.23.41-AM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.23.41-AM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.23.41-AM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.23.41-AM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-11.23.41-AM-2xl.png 1600w\"  alt=\"\" width=\"1428\" height=\"996\"></figure>\n<p>We can also decide to implement Responder manually for our type, then return that type and have the HttpResponse be created for us. This can work well in combination with actix's <a href=\"https://docs.rs/actix-web/4.0.1/actix_web/type.Result.html\">Result</a>. This results in the most Rust looking code to my eyes, but if you have a lot of different types of data to return, implementing <a href=\"https://actix.rs/actix-web/actix_web/trait.Responder.html#implementations-1\">Responder</a> manually for them is likely not worth the time, or the added clutter of your codebase. </p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-21-at-10.09.42-AM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.09.42-AM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.09.42-AM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.09.42-AM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.09.42-AM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.09.42-AM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.09.42-AM-2xl.png 1600w\"  alt=\"\" width=\"1080\" height=\"584\"></figure>\n<p>Obviously, you can construct your own <a href=\"https://actix.rs/actix-web/actix_web/struct.HttpResponse.html\">HttpReponse</a> as well. This method requires a lot of boiler-plate code when it comes to handling Error cases. As your project grows, you will probably want to avoid this method.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/Screen-Shot-2022-04-21-at-10.33.15-AM.png\" sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.33.15-AM-xs.png 300w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.33.15-AM-sm.png 480w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.33.15-AM-md.png 768w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.33.15-AM-lg.png 1024w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.33.15-AM-xl.png 1360w ,https://danielbatesj.github.io/Publii-Blogs/media/posts/2/responsive/Screen-Shot-2022-04-21-at-10.33.15-AM-2xl.png 1600w\"  alt=\"\" width=\"818\" height=\"408\"></figure>\n<p> </p>",
            "image": "https://danielbatesj.github.io/Publii-Blogs/media/posts/2/logo.webp",
            "author": {
                "name": "Daniel Bates"
            },
            "tags": [
                   "stack overflow",
                   "how to",
                   "best",
                   "actix_web",
                   "actix web",
                   "actix",
                   "Web Development",
                   "Service",
                   "Rust actix web",
                   "Rust",
                   "Routing",
                   "Routes",
                   "Return",
                   "Response",
                   "Responder",
                   "HttpResponse"
            ],
            "date_published": "2022-04-19T12:54:18-05:00",
            "date_modified": "2022-04-21T12:59:44-05:00"
        }
    ]
}
